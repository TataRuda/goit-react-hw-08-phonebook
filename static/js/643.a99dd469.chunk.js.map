{"version":3,"file":"static/js/643.a99dd469.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { logInUser } from 'redux/auth/operations';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n} from '@chakra-ui/react';\n\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n        logInUser({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n    <FormControl onSubmit={handleSubmit} autoComplete=\"off\"  isRequired color='secondary'>\n    <FormLabel htmlFor=\"emailId\">\n      Email\n    </FormLabel>  \n    <Input \n    id=\"emailId\"\n    type=\"email\" \n    name=\"email\" \n    placeholder='Enter your email' \n    bg='white'/>\n    \n    <FormLabel htmlFor='passwordId' pt='10px'>\n      Password\n    </FormLabel>  \n    <Input\n    id=\"passwordId\" \n    type=\"password\" \n    name=\"password\" \n    placeholder='Enter your password' \n    bg='white'/>\n    \n    <Button \n    mt='40px'\n    type=\"submit\" \n    size='lg'\n    variant='solid'\n    color='secondary' \n    _hover={{bgColor: 'active'}}>\n    Log In</Button>\n  </FormControl>\n  </form>\n  );\n};","import { LoginForm } from \"components/LoginForm/LoginForm\";\nimport { Box } from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\n\nexport default function LoginPage() {\n    useEffect(() => {\n        document.title = \"Login MyPhonebook\";\n    }, []);\n    return ( \n        <Box bg='background' align=\"center\" h='500px' p='50px' borderRadius='10px'>    \n            <LoginForm/>\n        </Box>\n    );\n}","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["LoginForm","dispatch","useDispatch","handleSubmit","e","preventDefault","form","currentTarget","logInUser","email","elements","value","password","reset","onSubmit","autoComplete","isRequired","color","htmlFor","I","id","type","name","placeholder","bg","pt","mt","size","variant","_hover","bgColor","LoginPage","useEffect","document","title","align","h","p","borderRadius","FormLabel","forwardRef","passedProps","ref","styles","useStyleConfig","props","omitThemingProps","children","className","requiredIndicator","RequiredIndicator","optionalIndicator","rest","field","useFormControlContext","ownProps","_a","getLabelProps","chakra","label","cx","__css","display","textAlign","displayName","useFormControlStyles","span","getRequiredIndicatorProps","createContext","errorMessage","FormControlStylesProvider","strict","FormControlProvider","FormControl","useMultiStyleConfig","idProp","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","useState","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","mergeRefs","node","dataAttr","getErrorMessageProps","getRootProps","role","onFocus","onBlur","useFormControlProvider","context","div","FormHelperText","helperText","useFormControl","disabled","readOnly","required","labelIds","push","join","_b","_c","callAllHandlers","useFormControlProps","ariaAttr","Input","htmlSize","input","_className"],"sourceRoot":""}