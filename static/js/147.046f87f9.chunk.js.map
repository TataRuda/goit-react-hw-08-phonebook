{"version":3,"file":"static/js/147.046f87f9.chunk.js","mappings":"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","sources":["webpack://goit-phonebook-react/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","components/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","webpack://goit-phonebook-react/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-phonebook-react/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btnDelete\":\"ContactItem_btnDelete__edqzG\",\"item\":\"ContactItem_item__gxreB\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations'; \nimport css from './ContactItem.module.css';\n\nexport const ContactItem = ({ id, name, number }) => {\n    const dispatch = useDispatch();\n    const handleDelete = () => {\n      dispatch(deleteContact(id));\n    };\n    return ( <li className={css.item} key={id}>\n        <span>{name}: {number}</span>\n        <button className={css.btnDelete} type=\"button\" onClick={handleDelete}>Delete</button>      \n    </li>\n    );\n}; \n\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector (\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n        return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase()))\n    }\n);","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\n\n\n export const ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  \n    return (\n        <ul>\n            {contacts.map((contact) => (\n            <ContactItem \n            key= {contact.id}\n            {...contact}\n            />\n            ))}\n        </ul>\n    )\n} \n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"button\":\"ContactForm_button__eSwX9\"};","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const initialState = { name: '', number: ''};\n  const [contact, setContact] = useState(initialState);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = (e) => {\n    setContact(prevState => ({\n      ...prevState,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const isDuplicate = contacts.find(({ name }) => name === contact.name);\n    const isDuplicateNumber = contacts.find(({ number }) => number === contact.number);\n  if (isDuplicate) {\n    alert( `${contact.name} already exists!`);\n    return;\n  }\n  else if (isDuplicateNumber) {\n    alert( `${contact.number} already exists in the contacts!`);\n    return;\n  }\n    dispatch(addContact({ name: contact.name, number: contact.number }));\n    setContact(initialState);\n  };\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label htmlFor={nameId}>Name</label>\n      <input\n        id={nameId}\n        type=\"text\"\n        value={contact.name}\n        onChange={handleChange}\n        pattern=\"[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        name=\"name\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <label htmlFor={numberId}>Number</label>\n      <input\n        id={numberId}\n        type=\"tel\"\n        value={contact.number}\n        onChange={handleChange}\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button className={css.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}; \n","// extracted by mini-css-extract-plugin\nexport default {\"filterBox\":\"Filter_filterBox__A-UPt\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport css from './Filter.module.css'\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChangeFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n    return (\n        <label className={css.filterBox}> Find contacts by name\n          <input className={css.filterInput}\n            type=\"text\"\n            name=\"filter\"\n            onChange={handleChangeFilter}\n            placeholder=\"Search...\"\n          />\n        </label>  \n    );\n   \n}\n\n","import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\n\nexport default function ContactsPage() {\n    const dispatch = useDispatch();\n\n    useEffect( () => {\n        dispatch(fetchContacts());\n    }, [dispatch]\n    );\n\n    return (\n        <>           \n            <title>Your contacts</title>\n            <ContactForm/>\n            <Filter/>            \n            <ContactList/>\n        </>\n    );\n}"],"names":["ContactItem","id","name","number","dispatch","useDispatch","className","css","type","onClick","deleteContact","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","Array","_key","_len2","funcs","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","Error","_directlyPassedOption2","finalMemoizeOptions","isArray","dependencies","every","dep","dependencyTypes","map","join","getDependencies","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","createSelector","selectContacts","state","contacts","items","selectFilteredContacts","filter","contact","toLowerCase","includes","ContactList","useSelector","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","ContactForm","initialState","useState","setContact","handleChange","e","prevState","target","nameId","numberId","onSubmit","preventDefault","isDuplicate","isDuplicateNumber","alert","addContact","htmlFor","onChange","pattern","title","required","Filter","setFilter","currentTarget","placeholder","ContactsPage","useEffect","fetchContacts"],"sourceRoot":""}